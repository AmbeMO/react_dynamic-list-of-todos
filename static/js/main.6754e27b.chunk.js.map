{"version":3,"sources":["components/TodoList/TodoList.tsx","api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["Status","TodoList","todos","selectedUserId","setSelectedUserId","useState","query","setQuery","completed","setCompleted","filtered","Active","filter","todo","title","toLowerCase","startsWith","Completed","className","action","type","value","onChange","event","target","All","map","defaultChecked","readOnly","classN","userId","onClick","API_URL","getUsers","id","a","fetch","response","json","getAll","CurrentUser","clearUser","isError","setIsError","currentUser","setUser","getUser","getedUser","useEffect","email","name","phone","App","setTodos","getData","useCallback","data","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6754e27b.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './TodoList.scss';\nimport classN from 'classnames';\n\ntype Props = {\n  todos: Todo[],\n  setSelectedUserId: (arg0: number) => void,\n  selectedUserId: number,\n};\n\nenum Status {\n  Active = 'Active',\n  Completed = 'Completed',\n  All = 'All',\n}\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectedUserId,\n  setSelectedUserId,\n}) => {\n  const [query, setQuery] = useState('');\n  const [completed, setCompleted] = useState('');\n\n  const filteredList = () => {\n    if (completed === Status.Active) {\n      return todos.filter(todo => (\n        todo.title.toLowerCase().startsWith(query.toLowerCase())\n        && !todo\n      ));\n    }\n\n    if (completed === Status.Completed) {\n      return todos.filter(todo => (\n        todo.title.toLowerCase().startsWith(query.toLowerCase())\n        && todo\n      ));\n    }\n\n    return todos.filter(todo => (\n      todo.title.toLowerCase().startsWith(query.toLowerCase())\n    ));\n  };\n\n  const filtered = filteredList();\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <div className=\"TodoList__list-container\">\n        <form action=\"\">\n          <input\n            type=\"text\"\n            data-cy=\"filterByTitle\"\n            value={query}\n            onChange={(event) => {\n              setQuery(event.target.value);\n            }}\n          />\n\n          <select\n            onChange={(event) => {\n              setCompleted(event.target.value);\n            }}\n          >\n            <option value={Status.All}>All</option>\n            <option value={Status.Active}>Active</option>\n            <option value={Status.Completed}>Completed</option>\n          </select>\n        </form>\n\n        <ul className=\"TodoList__list\">\n          {filtered.map(todo => (\n            <li className=\"TodoList__item TodoList__item--unchecked\">\n              <label>\n                <input\n                  type=\"checkbox\"\n                  defaultChecked={todo.completed}\n                  readOnly\n                />\n                <p>\n                  title :\n                  {todo.title}\n                </p>\n              </label>\n\n              <button\n                className={classN(\n                  'TodoList__user-button', 'button',\n                  {\n                    'TodoList__user-button--selected':\n                        todo.userId === selectedUserId,\n                  },\n                )}\n                type=\"button\"\n                onClick={() => (\n                  setSelectedUserId(todo.userId)\n                )}\n              >\n                userId :\n                {' '}\n                {todo.userId}\n              </button>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","const API_URL = 'https://mate.academy/students-api';\n\nexport const getUsers = async (id: number) => {\n  const response = await fetch(`${API_URL}/users/${id}`);\n\n  return response.json();\n};\n\nexport const getAll = async () => {\n  const response = await fetch(`${API_URL}/todos`);\n\n  return response.json();\n};\n","import React, { useEffect, useState } from 'react';\nimport './CurrentUser.scss';\nimport { getUsers } from '../../api';\n\ntype Props = {\n  userId: number,\n  clearUser: () => void\n};\n\nexport const CurrentUser: React.FC<Props> = ({ userId, clearUser }) => {\n  const [isError, setIsError] = useState(false);\n  const [currentUser, setUser] = useState<User | null>(null);\n\n  const getUser = async () => {\n    try {\n      const getedUser = await getUsers(userId);\n\n      setIsError(false);\n      setUser(getedUser);\n    } catch {\n      setIsError(true);\n      setUser(null);\n    }\n  };\n\n  useEffect(() => {\n    getUser();\n  }, [userId]);\n\n  return (\n    <>\n      { currentUser && (\n        <div className=\"CurrentUser\" key={currentUser.id}>\n\n          <h2 className=\"CurrentUser__title\">\n            <span>\n              Selected user:\n              {currentUser.email}\n            </span>\n          </h2>\n\n          <h3 className=\"CurrentUser__name\">\n            name :\n            {currentUser.name}\n          </h3>\n          <p className=\"CurrentUser__phone\">\n            phone :\n            {currentUser.phone}\n          </p>\n\n          <button\n            type=\"button\"\n            className=\"button is-light CurrentUser__clear\"\n            onClick={clearUser}\n          >\n            Clear\n          </button>\n\n        </div>\n      )}\n\n      { isError && (\n        <h3>Error!!!</h3>\n      )}\n\n    </>\n  );\n};\n","import React, { useState, useCallback, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getAll } from './api';\n\nconst App: React.FC = () => {\n  const [\n    selectedUserId,\n    setSelectedUserId,\n  ] = useState(0);\n\n  const [todos, setTodos] = useState<Todo[]>([]);\n\n  const getData = useCallback(async () => {\n    const data = await getAll();\n\n    setTodos(data);\n  }, []);\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  const clearUser = () => {\n    setSelectedUserId(0);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"App__sidebar\">\n        <TodoList\n          todos={todos}\n          setSelectedUserId={setSelectedUserId}\n          selectedUserId={selectedUserId}\n        />\n      </div>\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser\n              userId={selectedUserId}\n              clearUser={clearUser}\n            />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}